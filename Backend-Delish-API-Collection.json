{
  "info": {
    "name": "Backend-Delish API Collection - Updated",
    "description": "Complete and tested API collection for the Backend-Delish restaurant management system",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "menu_item_id",
      "value": "68c2b79efc434164f6416740",
      "type": "string"
    },
    {
      "key": "menu_item_id_2",
      "value": "68c2b7a6fc434164f6416743",
      "type": "string"
    },
    {
      "key": "confirmation_code",
      "value": "F71901B02D",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/registerUser",
              "host": ["{{base_url}}"],
              "path": ["auth", "registerUser"]
            },
            "description": "Register a new user account. Note: Uses 'name' field which maps to 'username' in the database."
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "});",
                  "",
                  "// Auto-save token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.globals.set('auth_token', response.token);",
                  "    pm.collectionVariables.set('auth_token', response.token);",
                  "    console.log('Token saved automatically:', response.token.substring(0, 20) + '...');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/loginUser",
              "host": ["{{base_url}}"],
              "path": ["auth", "loginUser"]
            },
            "description": "Login with existing user credentials. Token is automatically saved to environment variables."
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Get current authenticated user information. Requires JWT token."
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/forgotPassword",
              "host": ["{{base_url}}"],
              "path": ["auth", "forgotPassword"]
            },
            "description": "Request password reset for user. Sends email with reset token."
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset_token_from_email\",\n  \"password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/resetPassword",
              "host": ["{{base_url}}"],
              "path": ["auth", "resetPassword"]
            },
            "description": "Reset password using reset token received via email."
          },
          "response": []
        }
      ],
      "description": "User authentication endpoints - All tested and working"
    },
    {
      "name": "🍽️ Menu Management",
      "item": [
        {
          "name": "Get All Menu Items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Save first menu item ID for other tests",
                  "if (pm.response.json().length > 0) {",
                  "    const firstItem = pm.response.json()[0];",
                  "    pm.collectionVariables.set('menu_item_id', firstItem._id);",
                  "    console.log('Menu item ID saved:', firstItem._id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/menu",
              "host": ["{{base_url}}"],
              "path": ["menu"]
            },
            "description": "Get all menu items (public endpoint). No authentication required."
          },
          "response": []
        },
        {
          "name": "Get Menu Item by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains menu item data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('price');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/menu/{{menu_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["menu", "{{menu_item_id}}"]
            },
            "description": "Get specific menu item by ID. Note: Route was POST in original but should be GET."
          },
          "response": []
        },
        {
          "name": "Get Menu by Category",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/menu/category/main-course",
              "host": ["{{base_url}}"],
              "path": ["menu", "category", "main-course"]
            },
            "description": "Get menu items by category. Valid categories: Breakfast, Lunch, Dinner, appetizers, main-course, desserts, beverages"
          },
          "response": []
        },
        {
          "name": "Get Menu by Type",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/menu/type/seafood",
              "host": ["{{base_url}}"],
              "path": ["menu", "type", "seafood"]
            },
            "description": "Get menu items by dietary type. Valid types: vegetarian, vegan, gluten-free, seafood, meat, dairy-free"
          },
          "response": []
        },
        {
          "name": "Create Menu Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains created menu item\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('price');",
                  "    pm.expect(jsonData).to.have.property('category');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Grilled Chicken Breast\",\n  \"description\": \"Tender grilled chicken breast with herbs\",\n  \"price\": 19.99,\n  \"category\": \"main-course\",\n  \"type\": \"meat\",\n  \"ingredients\": [\"chicken\", \"herbs\", \"olive oil\"],\n  \"allergens\": [],\n  \"availability\": true,\n  \"preparationTime\": 15\n}"
            },
            "url": {
              "raw": "{{base_url}}/menu",
              "host": ["{{base_url}}"],
              "path": ["menu"]
            },
            "description": "Create a new menu item. Requires authentication. Image is optional."
          },
          "response": []
        },
        {
          "name": "Update Menu Item",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Grilled Salmon\",\n  \"description\": \"Premium Atlantic salmon grilled to perfection with lemon\",\n  \"price\": 26.99,\n  \"availability\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/menu/{{menu_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["menu", "{{menu_item_id}}"]
            },
            "description": "Update an existing menu item. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Delete Menu Item",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/menu/{{menu_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["menu", "{{menu_item_id}}"]
            },
            "description": "Delete a menu item. Requires authentication."
          },
          "response": []
        }
      ],
      "description": "Menu management endpoints - All tested and working"
    },
    {
      "name": "🛒 Cart Management",
      "item": [
        {
          "name": "Get Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains cart data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('cart');",
                  "    pm.expect(jsonData.cart).to.have.property('items');",
                  "    pm.expect(jsonData.cart).to.have.property('totalAmount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/cart",
              "host": ["{{base_url}}"],
              "path": ["cart"]
            },
            "description": "Get current user's cart items. Returns empty cart if no items. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Add to Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message and cart\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('cart');",
                  "    pm.expect(jsonData.cart).to.have.property('totalAmount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"menuItemId\": \"{{menu_item_id}}\",\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/cart",
              "host": ["{{base_url}}"],
              "path": ["cart"]
            },
            "description": "Add item to cart or update quantity if already exists. Automatically calculates total amount."
          },
          "response": []
        },
        {
          "name": "Remove from Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"menuItemId\": \"{{menu_item_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/cart",
              "host": ["{{base_url}}"],
              "path": ["cart"]
            },
            "description": "Remove specific item from cart completely."
          },
          "response": []
        },
        {
          "name": "Clear Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/cart/clear",
              "host": ["{{base_url}}"],
              "path": ["cart", "clear"]
            },
            "description": "Clear all items from cart."
          },
          "response": []
        }
      ],
      "description": "Shopping cart management endpoints - All tested and working"
    },
    {
      "name": "📦 Order Management",
      "item": [
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains order details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('order');",
                  "    pm.expect(jsonData.order).to.have.property('confirmationCode');",
                  "    pm.expect(jsonData.order).to.have.property('totalAmount');",
                  "    pm.expect(jsonData.order).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"menuItemId\": \"{{menu_item_id}}\",\n      \"quantity\": 2\n    },\n    {\n      \"menuItemId\": \"{{menu_item_id_2}}\",\n      \"quantity\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/orders",
              "host": ["{{base_url}}"],
              "path": ["orders"]
            },
            "description": "Create a new order from specified items. Automatically calculates total and generates confirmation code. Clears cart after order creation."
          },
          "response": []
        }
      ],
      "description": "Order management endpoints - Tested and working"
    },
    {
      "name": "🏪 Reservation Management",
      "item": [
        {
          "name": "Create Reservation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains confirmation code\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('confirmationCode');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "// Save confirmation code for testing",
                  "if (pm.response.json().confirmationCode) {",
                  "    pm.collectionVariables.set('confirmation_code', pm.response.json().confirmationCode);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"date\": \"2025-09-15\",\n  \"time\": \"19:00\",\n  \"guests\": 4,\n  \"specialRequest\": \"Window table preferred\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/reservations",
              "host": ["{{base_url}}"],
              "path": ["reservations"]
            },
            "description": "Create a new table reservation. No authentication required. Generates confirmation code and sends email."
          },
          "response": []
        },
        {
          "name": "Get All Reservations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reservations",
              "host": ["{{base_url}}"],
              "path": ["reservations"]
            },
            "description": "Get all reservations. Public endpoint - no authentication required."
          },
          "response": []
        },
        {
          "name": "Get Reservation by Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains reservation data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('confirmationCode');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reservations/{{confirmation_code}}",
              "host": ["{{base_url}}"],
              "path": ["reservations", "{{confirmation_code}}"]
            },
            "description": "Get reservation details by confirmation code. Public endpoint."
          },
          "response": []
        }
      ],
      "description": "Table reservation management endpoints - All tested and working"
    },
    {
      "name": "📁 File Upload",
      "item": [
        {
          "name": "Upload File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains upload details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('url');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Select an image file (jpg, png, jpeg, gif)"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/uploadFile",
              "host": ["{{base_url}}"],
              "path": ["uploadFile"]
            },
            "description": "Upload file to Cloudinary storage. Supports images in jpg, png, jpeg, gif formats."
          },
          "response": []
        }
      ],
      "description": "File upload endpoints - Cloudinary integration tested and working"
    },
    {
      "name": "⚠️ Error Testing",
      "item": [
        {
          "name": "Test Unauthorized Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response contains error message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Test unauthorized access (no token provided)"
          },
          "response": []
        },
        {
          "name": "Test Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response contains error message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Test invalid token handling"
          },
          "response": []
        },
        {
          "name": "Test Invalid Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/nonexistent-endpoint",
              "host": ["{{base_url}}"],
              "path": ["nonexistent-endpoint"]
            },
            "description": "Test 404 error handling for invalid endpoints"
          },
          "response": []
        }
      ],
      "description": "Error handling and edge case testing"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('API Request to:', pm.request.url.toString());",
          "",
          "// Check if auth token is needed and available",
          "const needsAuth = pm.request.headers.has('Authorization');",
          "if (needsAuth) {",
          "    const token = pm.collectionVariables.get('auth_token');",
          "    if (!token || token === '') {",
          "        console.warn('⚠️ Authentication token not set. Please login first.');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "console.log('Response Status:', pm.response.status, pm.response.code);",
          "",
          "// Log response time",
          "console.log('Response Time:', pm.response.responseTime + 'ms');",
          "",
          "// Basic tests for all requests",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Content-Type checks",
          "if (pm.response.headers.get('Content-Type')) {",
          "    pm.test('Content-Type is JSON', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}"
        ]
      }
    }
  ]
}
